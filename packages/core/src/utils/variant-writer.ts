import { writeFile, mkdir } from 'fs/promises';
import { dirname, extname, basename, join } from 'path';

import type { LangPlugin } from '../types/plugin.js';

/**
 * Write variant files to disk
 */
export class VariantWriter {
  constructor(private plugin: LangPlugin) {}

  /**
   * Get variant file path
   */
  getVariantPath(originalPath: string, provider: string, model: string): string {
    const dir = dirname(originalPath);
    const ext = extname(originalPath);
    const base = basename(originalPath, ext);

    // Clean model name for filename
    const cleanModel = model.replace(/[^a-z0-9-]/gi, '_');

    return join(dir, `${base}.${provider}.${cleanModel}${ext}`);
  }

  /**
   * Write variant to file
   */
  async write(outputPath: string, code: string, metadata?: any): Promise<void> {
    await mkdir(dirname(outputPath), { recursive: true });

    // Add metadata as comment if available
    let content = code;
    if (metadata) {
      const comment = this.generateMetadataComment(metadata);
      content = comment + '\n\n' + code;
    }

    await writeFile(outputPath, content, 'utf-8');
  }

  /**
   * Generate metadata comment based on language
   */
  private generateMetadataComment(metadata: any): string {
    const lines = [
      `Generated by llm-benchmark`,
      `Provider: ${metadata.provider}`,
      `Model: ${metadata.model}`,
      `Tokens: ${metadata.promptTokens} prompt, ${metadata.completionTokens} completion`,
      `Cost: $${metadata.costUsd.toFixed(4)}`,
      `Latency: ${metadata.latencyMs}ms`,
      `Generated at: ${new Date().toISOString()}`,
    ];

    // Format based on language
    switch (this.plugin.id) {
      case 'js':
      case 'ts':
      case 'rust':
      case 'go':
      case 'java':
      case 'c':
      case 'cpp':
        return `/**\n * ${lines.join('\n * ')}\n */`;

      case 'py':
      case 'rb':
        return `"""\n${lines.join('\n')}\n"""`;

      case 'sh':
      case 'bash':
        return lines.map((line) => `# ${line}`).join('\n');

      default:
        return `/* ${lines.join(' | ')} */`;
    }
  }
}
